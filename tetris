int col[8]={3,4,5,6,7,8,9,10};
int row[8]={11,12,13,14,15,16,17,18};
/*unsigned char dot[8][8]{
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0}
};*/
unsigned char dot[10][10]{
  {1,1,1,1,1,1,1,1,1,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,1,1,1,1,1,1,1,1,1}
};
unsigned char dot_overlap[10][10]{
  {1,1,1,1,1,1,1,1,1,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,0,0,0,0,0,0,0,0,1},
  {1,1,1,1,1,1,1,1,1,1}
};
unsigned char block_L[4][4][4]{
 {{0,0,0,0},
  {0,1,0,0},
  {0,1,1,1},
  {0,0,0,0}},
  
 {{0,0,0,0},
  {0,1,1,0},
  {0,1,0,0},
  {0,1,0,0}},
  
 {{0,0,0,0},
  {1,1,1,0},
  {0,0,1,0},
  {0,0,0,0}},
  
 {{0,0,0,0},
  {0,0,1,0},
  {0,0,1,0},
  {0,1,1,0}}
};
int rotate=0;
int real_rem_num=-1;
unsigned long prev_millis_remocon=0;
unsigned long curr_millis=0;
unsigned long prev_millis=0;
unsigned long prev_millis_1sec=0;
unsigned long prev_millis_adc=0;
unsigned matrix_array[8]={0x23,0x37,0x88,0x44,0x22,0x11,0x99,0xff};
int x=2;
int y=-2;
int flag_left=0;
int flag_right=0;
int flag_up=0;
int flag_down=0;
void setup() {
  for(int i=0;i<16;i++){
    pinMode(3+i,OUTPUT);
  }

  //remocon
  pinMode(2,INPUT);
  attachInterrupt(0,remoconISR,FALLING);
  for(int i=0;i<8;i++){
    digitalWrite(col[i],HIGH);
  }
  for(int i=0;i<8;i++){
    digitalWrite(row[i],LOW);
  }
}
int row_index=0;
void loop() {
  curr_millis=millis();
  if(curr_millis-prev_millis>=1){
    prev_millis=curr_millis;
   for(int i=0;i<8;i++){
     digitalWrite(row[i],LOW);
    }
    for(int i=0;i<8;i++){
     if(dot[row_index+1][i+1]==1){
        digitalWrite(col[i],LOW);
     }
     else digitalWrite(col[i],HIGH);
   }
   digitalWrite(row[row_index],HIGH);
  row_index++;
  if(row_index==8)row_index=0;
  }
  if(curr_millis-prev_millis_1sec>=1000){
    prev_millis_1sec=curr_millis;
    if(overlap_check(0,1)==0){
      delete_block();
      y++;
      make_block();
    }
    else{
      rotate=0;
      insert_block();
      x=2;
      y=-2;
    }
  }
 /* if(curr_millis-prev_millis_adc>=10){
    prev_millis_adc=curr_millis;
    int joystick_x=analogRead(A5);
    int joystick_y=analogRead(A4);
    if(joystick_x<400){
      if(flag_left==0){
      flag_left=1;
      if(overlap_check(-1,0)==0){
        delete_block();
        x--;
        make_block();
        }
      }
    }
    else if(joystick_x>600){
      if(flag_right==0){
      flag_right=1;
      if(overlap_check(1,0)==0){
        delete_block();
        x++;
        make_block();
        }
      }
    }
    else {
      flag_right=0;
      flag_left=0;
    }
    if(joystick_y<400){
      if(flag_up==0){
        flag_up=1;
        if(overlap_rotate()==0){
        delete_block();
        rotate=++rotate%4;
        make_block();
        }
      }
    }
    else if(joystick_y>600){
      if(flag_down==0){
        flag_down=1;
        if(overlap_check(0,1)==0){
        delete_block();
        y++;
        make_block();
        }
      }
    }
    else {
      flag_down=0;
      flag_up=0;
    }
  }*/
  if(curr_millis-prev_millis_remocon>=10){
    prev_millis_remocon=curr_millis;
    if(real_rem_num!=-1){
      if(real_rem_num==1){
        if(overlap_check(-1,0)==0){
        delete_block();
        x--;
        make_block();
        }
      }
      else if(real_rem_num==3){
        if(overlap_check(1,0)==0){
        delete_block();
        x++;
        make_block();
        }
      }
      else if(real_rem_num==5){
        while(overlap_check(0,1)==0){
        delete_block();
        y++;
        make_block();
        }
      }
      else if(real_rem_num==2){
        if(overlap_rotate()==0){
        delete_block();
        rotate=++rotate%4;
        make_block();
        }
      }
    }
    real_rem_num=-1;
  }
}
void make_block(){
  for(int j=0;j<4;j++){
    for(int i=0;i<4;i++){
      if(block_L[rotate][j][i]==1){
        dot[j+y+1][i+x+1]=1;
      }
    }
  }
}
void delete_block(){
  for(int j=0;j<4;j++){
    for(int i=0;i<4;i++){
      if(block_L[rotate][j][i]==1){
        dot[j+y+1][i+x+1]=0;
      }
    }
  }
}
int overlap_check(int offset_x,int offset_y){
  int block_count=0;
  for(int j=0;j<4;j++){
    for(int i=0;i<4;i++){
      if(block_L[rotate][j][i]==1&&dot_overlap[j+y+1+offset_y][i+x+1+offset_x]==1){
        block_count++;
      }
    }
  }
  return block_count;
}
int overlap_rotate(){
  int block_count=0;
  int tmp_rotate=(rotate+1)%4;
  for(int j=0;j<4;j++){
    for(int i=0;i<4;i++){
      if(block_L[tmp_rotate][j][i]==1&&dot_overlap[j+y+1][i+x+1]==1){
        block_count++;
      }
    }
  }
  return block_count;
}
void insert_block(){
  for(int j=0;j<4;j++){
    for(int i=0;i<4;i++){
      if(block_L[rotate][j][i]==1){
        dot_overlap[j+y+1][i+x+1]=1;
      }
    }
  }
}//===============================remocon
unsigned char remocon_number[10]={0x68,0x30,0x18,0x7a,0x10,0x38,0x5a,0x42,0x4a,0x52};
unsigned long recv_time[40];
int diff_time[33];
int toggle_flag=0;
unsigned long down_time=0;
int int_count=0;
int bit_value[32];
int data_bit[8];

void remoconISR(){
  recv_time[int_count]=micros();
  if(int_count>0){
    diff_time[int_count-1]=recv_time[int_count]-recv_time[int_count-1];
    if(diff_time[int_count-1]>13000&&diff_time[int_count-1]<14000){
      //Serial.println("Lead Code");
      int_count=1;
    }
    else if(diff_time[int_count-1]>11000&&diff_time[int_count-1]<12000){
      //Serial.println("Repeat Code");
      //Serial.println(real_rem_num);
      int_count=-1;
    }
  }
  int_count++;
  if(int_count==34){
    int_count=0;
    /*for(int i=0;i<34;i++){
      Serial.print(i);
      Serial.print(" : ");
      Serial.println(recv_time[i]);
    }*/
    /*for(int i=0;i<33;i++){
      diff_time[i]=recv_time[i+1]-recv_time[i];
      Serial.print(i);
      Serial.print(" : ");
      Serial.println(diff_time[i]);
    }*/
    for(int i=0;i<32;i++){
      if(diff_time[i+1]>1000&&diff_time[i+1]<1200){
        bit_value[i]=0;
      }
      else if(diff_time[i+1]>2000&&diff_time[i+1]<2500)
        bit_value[i]=1;
    }
    for(int i=0;i<8;i++){
      data_bit[i]=bit_value[i+16];
      //Serial.println(data_bit[i]);
    }
    char tmp_data=0;
    for(int i=0;i<8;i++){  
      tmp_data <<=1;
      if(data_bit[i]==1){
        tmp_data |=0x01; 
      }
    }
    real_rem_num=-1;
    for(int i=0;i<10;i++){
      if(tmp_data==remocon_number[i]){
        real_rem_num=i;
        break;
      }
    }
    if(real_rem_num!=-1){
      
    }
  }
}
